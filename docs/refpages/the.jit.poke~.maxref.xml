<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<c74object name="the.jit.poke~" module="jitter" category="Jitter System">

	<digest>
		Poke signal data to a named matrix and store progressions for non-realtime rendering
	</digest>

	<description>
		Written by Tim Heinze © 2020, www.xenorama.com. <br/>
		Capture signal data to a specified <o>jit.matrix</o> for offline reading and rendering, controlled by <o>the.jit.renderer~</o>. Designed to replace a <o>jit.poke~</o> with flexible <ar>dim_inputcount</ar> (by default: max. 13) and variable target plane. It records temporary blocks of matrices which are deleted upon completion of the recording process and compiled into a <m>jxf</m>-file to be read by an internal <o>jit.matrixset</o>. This requires the implementation of <o>node.script</o>.
	</description>

	<discussion>
		<o>the.jit.renderer~</o> providing a central context is required in the enviroment.
		<br/>
		<br/>
	 	<o>the.jit.poke~</o> writes incoming signals to a target matrix, as does <o>jit.poke~</o>. During recording, however, it writes incoming signals to a temporary matrix, allocating every dimension to a separate plane, as well as potential target plane-changes and frame-progressions. These are collected continuously and stored in blocks of matrices, which in are written temporarily to disk and upon rendering completion will be compiled into a <o>jit.matrixset</o> while the temproary files are deleted (using <o>node.script</o> internally). During rendering, the collected values are decoded and written to the target matrix to output the correct data at every frame.
		<br/>
		<br/>
		The <b>amygdala</b> (/əˈmɪɡdələ/; plural: amygdalae /əˈmɪɡdəli, -laɪ/ or amygdalas; also corpus amygdaloideum; Latin from Greek, ἀμυγδαλή, amygdalē, 'almond', 'tonsil') is one of two almond-shaped clusters of nuclei located deep and medially within the temporal lobes of the brain in complex vertebrates. Shown to perform a primary role in the processing of memory, decision-making and emotional responses, the amygdalae are considered part of the limbic system.
	</discussion>


	<!--METADATA (REMOVE FOR SIMPLICITY) -->
	<metadatalist>
		<metadata name="author">Tim Heinze</metadata>
		<metadata name="tag">Xenorama</metadata>
		<metadata name="tag">Offline Video Rendering</metadata>
		<metadata name="tag">Jitter System</metadata>
	</metadatalist>

	<!--INLETS (REMOVE FOR SIMPLICITY) -->

	<!--OUTLETS (REMOVE FOR SIMPLICITY) -->

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="ctx" optional="0" type="symbol" size="1">
			<digest>
				Specify a named render context to bind to.
			</digest>
			<description>
				Specify a named render context to bind to. A valid context — represented by identically named <o>jit.world</o> and <o>the.jit.renderer~</o>, respectively — is necessary for all offline rendering operations.
				<br/>As of Version 2.0, the context name must be identical to that of a <o>jit.world</o> instance in the environment. Omission of the render-context will highlight the object bogus and throw an error.
			</description>
		</objarg>
		<objarg name="matrix-name" optional="0" type="symbol" size="1">
			<digest>
				Matrix name
			</digest>
			<description>
				The name of the <m>jit_matrix</m> to access (default = 0). Identical to the matrix used before with <o>jit.poke</o>
			</description>
		</objarg>
		<objarg name="dim_inputcount" optional="0" type="int" size="1">
			<digest>
				Number of dimensions
			</digest>
			<description>
				The number of dimensions in the named matrix (maximum: 13)
			</description>
		</objarg>
		<objarg name="plane-index" optional="0" type="int" size="1">
			<digest>
				Plane for cell value to be replaced by leftmost channel
			</digest>
			<description>
				The plane in a cell whose value is replaced by leftmost channel in the multi-channel signal (default = 0). The target plane can be changed dynamically with the <m>plane</m> message.
			</description>
		</objarg>
	</objarglist>

	<!--ATTRIBUTES (REMOVE FOR SIMPLICITY) -->
<attributelist>
	<attribute name="active" get="1" set="1" type="int" size="1">
		<digest>
			Set the active flag
		</digest>
		<description>
			Set the active flag. There are 5 active states available suitable for different purposes:
			<br/>
			<br/>0 = ignore this object and pass everything through without recording or recalling
			<br/>1 = operate normally (default); playback, record and output during rendering
			<br/>2 = playback and output previously recorded data normally but do not record any new data
			<br/>3 = playback and record normally but do not output data during rendering
			<br/>4 = record and output during rendering but never pass incoming data
			<br/>5 = mute all activity
			<br/>
			<br/>Note that while recording is disabled, the automatic export upon recording completion (if an <at>exportname</at> is specified) is also disabled and previous files will not be overwritten.
			<br/>Furthermore, the <at>active</at> flag is overriden by the <m>solo</m> state of the object, which can be handled using the <m>queue</m> method.
		</description>
	</attribute>
	<attribute name="autoclear" get="1" set="1" type="bool" size="1">
		<digest>
			Clear the compressed matrix before recording
		</digest>
		<description>
			Clear the compressed matrix before recording. Ensures that later video rendering will only add the recorded data. <br/>
			<at>autoclear</at> is disabled (0) by default
		</description>
	</attribute>
	<attribute name="clearmess" get="1" set="1" type="anything" size="1">
		<digest>
			Format a message to initialise the target matrix
		</digest>
		<description>
			Specify a message to be sent to the target matrix before recording/rendering.
			The default message is 'clear' (start out with a blank jit_matrix)
		</description>
	</attribute>
	<attribute name="name" get="1" set="1" type="symbol" size="1">
		<digest>
			Specify a unique name to write to.
		</digest>
		<description>
			Specify a unique name to export to after completion of the capturing process, managed by <o>the.jit.renderer~</o>. The resulting filetype is <m>jxf</m> (Jitter binary data file) and can be re-exported/imported using the <m>export</m> and <m>import</m> messages, respectively.
			<br/>
			Same as <at>exportname</at>
		</description>
	</attribute>
	<attribute name="verbose" get="1" set="1" type="bool" size="1">
		<digest>
		Toggle continuous matrix monitoring
		</digest>
		<description>
		When enabled will output a temporary <m>jit_matrix</m> representing an abstract compression of the running multich-channel audio upon completion of a single dimension-scan.
		<br/>
		When disabled, a <m>bang</m> in leftmost inlet triggers output of most recent <m>jit_matrix</m>
		<br/>
		The default is 0 (disabled)
		</description>
</attribute>
	</attributelist>
		<!--MESSAGES-->

	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output temporary data matrix
			</digest>
			<description>
				Output temporary data matrix from rightmost outlet
			</description>
		</method>
		<method name="multichannelsignal">
			<arglist />
			<digest>
				Realtime audio to write to the matrix
			</digest>
			<description>
				<o>the.jit.poke~</o> expects a <m>multi-channel signal</m>, comprised of channels pertaining to the object box <m>arguments</m>
				<br/>
				<br/>
				<at>channel 1: value to write</at> <br/>
				<at>channel 2: dim[0]</at> <br/>
				… <br/>
				<at>channel n: dim[n]</at> <br/>
			</description>
		</method>
		<method name="plane">
			<arglist>
				<arg name="index" optional="0" type="int" />
			</arglist>
			<digest>
				Specify the plane in the target matrix
			</digest>
			<description>
				During recording, the plane in the target matrix can be changed with the <m>plane $1</m> message
			</description>
		</method>
		<method name="import">
			<arglist>
				<arg name="index" optional="1" type="symbol" />
			</arglist>
			<digest>
				Import Jitter binary data file
			</digest>
			<description>
				If an <at>exportname</at> has previously been specified, the jxf-file will be read from the <m>dir</m> as specified by <o>the.jit.renderer~</o>.
				<br/> If an optional argument is provided (symbol), it will be attempted to read a jxf-file with this name from disk.
			</description>
		</method>
				<method name="clear">
			<arglist />
			<digest>
				Clears any previously poked data
			</digest>
			<description>
				The message <m>clear</m> will delete any previously poked signal data from the internal buffer.
			</description>
		</method>
		<method name="clearall">
			<arglist />
			<digest>
				Clears all matrices linked with the recording
			</digest>
			<description>
				The message <m>clearall</m> will clear all matrices which have been referenced using the <at>matrix_name</at> attribute during recording.
			</description>
		</method>
	</methodlist>

	<!--SEEALSO (REMOVE FOR SIMPLICITY) -->
	<seealsolist>
		<seealso name="jit.poke~"/>
		<seealso name="the.oneirotomy.setup"/>
		<seealso name="the.jit.renderer~"/>
		<seealso name="the.mc.jit.catch~"/>
		<seealso name="the.snapshot~"/>
		<seealso name="the.timeline"/>
		<seealso name="poly~"/>
		<seealso name="node.script"/>
		<seealso module="jitter" name="oneirotomy-00_introduction" type="vignette" />
		<seealso module="jitter" name="oneirotomy-01_object-overview" type="vignette" />
	</seealsolist>
</c74object>
