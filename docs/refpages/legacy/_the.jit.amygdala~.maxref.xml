<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<c74object name="the.jit.amygdala~" module="jitter" category="Jitter System">

	<digest>
		Poke spectral data to a one-dimensional matrix for offline rendering.
	</digest>

	<description>
		Written by Tim Heinze © 2020, www.xenorama.com. <br/>
		Capture continuous fft data to a specified one-dimensional jit.matrix for offline reading and rendering, controlled by <o>the.jit.thalamus</o>. Designed to replace a <o>jit.poke~</o> with <at>dimcount</at> of 1 but variable target plane.
		<br/>
		Its counterpart <o>the.jit.amygala</o> is to be placed after any named spectral matrix otherwise being populated by <o>jit.poke~</o> to iterate through the recorded fft frames.
	</description>

	<!--METADATA (REMOVE FOR SIMPLICITY) -->
	<metadatalist>
		<metadata name="author">Tim Heinze</metadata>
		<metadata name="tag">Xenorama</metadata>
		<metadata name="tag">Offline Video Rendering</metadata>
		<metadata name="tag">Jitter System</metadata>
	</metadatalist>

	<!--INLETS (REMOVE FOR SIMPLICITY) -->

	<!--OUTLETS (REMOVE FOR SIMPLICITY) -->

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="render-context" optional="0" type="symbol" size="1">
			<digest>
				Specify a named render context to bind to.
			</digest>
			<description>
				For convenience, this can be identical to one's world render context name but is to be considered independent. <o>the.jit.thalamus</o> with a unique context name is required running in parallel for all members of the offline render family to sync and respond to.
			</description>
		</objarg>
		<objarg name="matrix-name" optional="0" type="symbol" size="1">
			<digest>
				Matrix name
			</digest>
			<description>
				The name of the <m>jit_matrix</m> to access (default = 0). Identical to the matrix used before with <o>jit.poke</o>
			</description>
		</objarg>
		<objarg name="full-spectrum-size" optional="0" type="int" size="1">
			<digest>
				Dimension of the target matrix
			</digest>
			<description>
				Horizontal dimension of the target matrix across which the fft indices are spread
			</description>
		</objarg>
		<objarg name="planecount" optional="0" type="int" size="1">
			<digest>
				Number of planes if in matrix
			</digest>
			<description>
				Number of planes in target matrix
			</description>
		</objarg>
	</objarglist>

	<!--ATTRIBUTES (REMOVE FOR SIMPLICITY) -->

<attributelist>
	<attribute name="planemap" get="1" set="1" type="list" size="1">
		<digest>
		Planes to write to
		</digest>
		<description>
		List of zero-based integers representing individual planes of the target matrix to poke to. If the list length exceeds the <at>planecount</at> it will be stripped accordingly from the left.
		<br/>
		The default is 0 (plane 1)
		</description>
</attribute>
	<attribute name="verbose" get="1" set="1" type="bool" size="1">
		<digest>
		Toggle continuous matrix monitoring
		</digest>
		<description>
		When enabled will output a temporary <m>jit_matrix</m> representing the running spectral audio upon completion of recording every single fft frame.
		<br/>
		When disabled, a <m>bang</m> in leftmost inlet triggers output of most recent <m>jit_matrix</m>
		<br/>
		The default is 0 (disabled)
		</description>
</attribute>
<attribute name="exportname" get="1" set="1" type="symbol" size="1">
	<digest>
		Specify a unique name to write to.
	</digest>
	<description>
		Specify a unique name to export to after completion of the capturing process, managed by <o>the.jit.thalamus</o>. The resulting filetype is <m>jxf</m> (Jitter binary data file) and can be re-exported/imported using the <m>export</m> and <m>import</m> messages, respectively.
	</description>
</attribute>
<attribute name="filetype" get="1" set="1" type="int" size="1">
	<digest>
		Sets the filetype of the destination file
	</digest>
	<description>
		Sets the filetype of the destination file:
		<br/>
		<br/>• jxf = Jitter Binary data file (for matrices with more than 3 planes)
		<br/>• png
		<br/>• tiff
	</description>
</attribute>
<attribute name="active" get="1" set="1" type="int" size="1">
	<digest>
		Set the active flag
	</digest>
	<description>
		Set the active flag. There are 4 active states available suitable for different purposes:
		<br/>
		<br/>0 = ignore this object and poke signal data without recording
		<br/>1 = operate normally (default); poke and record
		<br/>2 = (idle)
		<br/>3 = (idle)
		<br/>4 = record but never poke directly to matrix
		<br/>5 = mute all activity
		<br/>
		<br/>Note that while recording is disabled, the automatic export upon recording completion (if an <at>exportname</at> is specified) is also disabled and previous files will not be overwritten.
	</description>
</attribute>
<attribute name="outputmode" get="1" set="1" type="int" size="1">
	<digest>
		Sets the transposition of the monitor matrix
	</digest>
	<description>
		Sets the transposition of the monitor matrix:
		<br/>
		<br/>0 = horizontal (default)
		<br/>1 = vertical
		<br/>
		<br/>This setting is for monitoring only and does not affect the target matrix.
	</description>
</attribute>
	</attributelist>
		<!--MESSAGES-->

	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Render bang
			</digest>
			<description>
				Render bang
			</description>
		</method>
		<method name="multichannelsignal">
			<arglist />
			<digest>
				Realtime spectral multi-channel audio
			</digest>
			<description>
				In left inlet: Realtime spectral audio, expecting the output from a <o>cartopol~</o> object which in return is fed by any complex number hailing from a time to frequency domain converter (like the <o>fft~</o>). This should work as well inside a <o>pfft~</o>.
				<br/>
				In right inlet: Realtime spectral audio, expecting continuously increasing bin indices from an <o>fft~</o> or <o>fftin~</o>. Set the <at>deltamode</at> to <m>1</m> if the bin indices instead are decreasing. Randomised bin indices are not (yet) supported).
				<br/>
				<br/>
				The number of channels should be identical in both inlets, each channel represents a value to write (left inlet) and a dim_input to the planes specified by the <at>planemap</at> attribute (right inlet).
			</description>
		</method>
			<method name="signal">
				<arglist />
				<digest>
					Realtime spectral audio
				</digest>
				<description>
					Same as <m>multichannelsignal</m> but limited to a <at>planecount</at> of <m>1</m>.
				</description>
		</method>
		<method name="export">
			<arglist>
				<arg name="filename" optional="1" type="symbol" />
			</arglist>
			<digest>
				Export as image file
			</digest>
			<description>
				If an <at>exportname</at> has previously been specified, the png-file will be written to the <m>dir</m> as specified by <o>the.jit.thalamus</o>.
				<br/> If an optional argument is provided (symbol), a png-file with this name will be written to disk.
			</description>
		</method>
		<method name="import">
			<arglist>
				<arg name="filename" optional="1" type="symbol" />
				<arg name="bool" optional="1" type="int" />
			</arglist>
			<digest>
				Import image file
			</digest>
			<description>
				If an <at>exportname</at> has previously been specified, the png-file will be read from the <m>dir</m> as specified by <o>the.jit.thalamus</o>.
				<br/> If an optional argument is provided (symbol), it will be attempted to read a png-file with this name from disk.
			</description>
		</method>
	</methodlist>

	<!--SEEALSO (REMOVE FOR SIMPLICITY) -->
	<seealsolist>
		<seealso name="the.jit.thalamus~"/>
		<seealso name="the.jit.amygdala"/>
		<seealso name="the.mc.jit.mandelbulb~"/>
		<seealso name="the.mc.jit.mandelbulb"/>
		<seealso name="the.jit.cochlea"/>
		<seealso name="the.mc.pac~"/>
		<seealso name="the.jit.retina"/>
		<seealso name="the.cerebellum"/>
	</seealsolist>

</c74object>
