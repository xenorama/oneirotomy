<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<c74object name="the.mc.jit.mnemonic~" module="jitter" category="Jitter System">

	<digest>
		Replace a <o>jit.catch~</o> for non-realtime rendering (W.I.P.)
	</digest>

	<description>
		Written by Tim Heinze Â© 2020, www.xenorama.com. <br/>
		Write signal data to matrices to later recall them for offline rendering. Replace any <o>jit.catch~</o> object in the patcher by this object. Functiuonality can not yet be guaranteed when working with open end recordings or long audiofiles. See the <i>discussion</i> for more info.
	</description>

	<discussion>
		<o>the.jit.thalamus</o> providing a central context is required in the enviroment.
		<br/>
		<br/>
	 	Disclaimer: <o>the.mc.jit.mnemonic~</o> is not yet officially supported and to be seen as <i>work-in-progress</i>-solution to support existing <o>jit.catch~</o> objects in the Jitter environment. Limitations are that the object's native mode (0) cannot be supported due to its varying matrix-dimensions, which in return cannot be captured along the way, yet. At the core lies an <o>mc.jit.catch~</o> supporting multichannel-signal input as well as a <o>jit.concat</o> to record the resulting matrices for later offline recall. This object is subject to further developments, likewise not cleaned up and the helpfile is improvised. Any suggestions welcome.
	</discussion>


	<!--METADATA (REMOVE FOR SIMPLICITY) -->
	<metadatalist>
		<metadata name="author">Tim Heinze</metadata>
		<metadata name="tag">Xenorama</metadata>
		<metadata name="tag">Offline Video Rendering</metadata>
		<metadata name="tag">Jitter System</metadata>
	</metadatalist>

	<!--INLETS (REMOVE FOR SIMPLICITY) -->

	<!--OUTLETS (REMOVE FOR SIMPLICITY) -->

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="render-context" optional="0" type="symbol" size="1">
			<digest>
				Specify a named render context to bind to.
			</digest>
			<description>
				For convenience, this can be identical to one's world render context name but is to be considered independent. <o>the.jit.thalamus</o> with a unique context name is required running in parallel for all members of the offline render family to sync and respond to.
			</description>
		</objarg>
		<objarg name="channels" optional="0" type="int" size="1">
			<digest>
				Number of audio-channels
			</digest>
			<description>
				Number of expected audio channels in the multichannel-signal, likely to represent individual planes of the resulting matrix.
			</description>
		</objarg>
	</objarglist>

	<!--ATTRIBUTES (REMOVE FOR SIMPLICITY) -->
<attributelist>
	<attribute name="verbose" get="1" set="1" type="bool" size="1">
		<digest>
		Toggle continuous matrix monitoring
		</digest>
		<description>
		When enabled will output a temporary <m>jit_matrix</m> representing an abstract compression of the running multich-channel audio upon completion of a single dimension-scan.
		<br/>
		When disabled, a <m>bang</m> in leftmost inlet triggers output of most recent <m>jit_matrix</m>
		<br/>
		The default is 0 (disabled)
		</description>
</attribute>
<attribute name="exportname" get="1" set="1" type="symbol" size="1">
	<digest>
		Specify a unique name to write to.
	</digest>
	<description>
		Specify a unique name to export to after completion of the capturing process, managed by <o>the.jit.thalamus</o>. The resulting filetype is <m>jxf</m> (Jitter binary data file) and can be re-exported/imported using the <m>export</m> and <m>import</m> messages, respectively.
		<br/>Same as <at>name</at>
	</description>
</attribute>
<attribute name="name" get="1" set="1" type="symbol" size="1">
	<digest>
		Specify a unique name to write to.
	</digest>
	<description>
		Specify a unique name to export to after completion of the capturing process, managed by <o>the.jit.thalamus</o>. The resulting filetype is <m>jxf</m> (Jitter binary data file) and can be re-exported/imported using the <m>export</m> and <m>import</m> messages, respectively.
		<br/>
		Same as <at>exportname</at>
	</description>
</attribute>
<attribute name="active" get="1" set="1" type="int" size="1">
	<digest>
		Set the active flag
	</digest>
	<description>
		Set the active flag. There are 4 active states available suitable for different purposes:
		<br/>
		<br/>0 = bypass this object and poke signal data without recording
		<br/>1 = operate normally (default); poke and record
		<br/>2 = poke but do not record any new data
		<br/>3 = (idle)
		<br/>4 = record but never poke directly to matrix
		<br/>5 = mute all activity
		<br/>
		<br/>Note that while recording is disabled, the automatic export upon recording completion (if an <at>exportname</at> is specified) is also disabled and previous files will not be overwritten.
		<br/>Furthermore, the <at>active</at> flag is overriden by the <m>solo</m> state of the object
	</description>
</attribute>
<attribute name="downsample" get="1" set="1" type="int" size="1">
			<digest>
				Set downsampling factor
			</digest>
			<description>
				A downsampling factor (default=1). If downsampling value is set to n, each group of n successive samples are averaged.
			</description>
		</attribute>
		<attribute name="framesize" get="1" set="1" type="int" size="1">
			<digest>
				Output matrix width
			</digest>
			<description>
				In some modes, the width of the output matrix. (default=320)
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Framesize" />
			</attributelist>
		</attribute>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Capture and output mode
			</digest>
			<description>
				Ass opposed to <o>jit.catch~</o>, only three different modes are possible: in mode 0 (not supported), all data since the last output would be output in a one-dimensional matrix, however, this would yield varying matrix-dimensions and can currently not be supported! In mode 1 the amount of buffered data that fits into a multiple of the <at>framesize</at> is output in two dimensions; data not output will be saved for the next time. In these first two modes, every sample collected should be output once and only once. In mode 2 a <at>framesize</at> of the most recent data is output. Mode 3 causes <o>jit.catch~</o> to behave like an oscilloscope, triggering on channel <at>trigchan</at> when the signal crosses <at>triglevel</at> in the direction <at>trigdir</at>. If the threshold has not been passed for the duration of the entire internal data buffer (100 ms), jit.catch~ reverts temporarily to mode 2 behavior and outputs the most recent data until the threshold is crossed again.
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Capture Mode" />
			</attributelist>
		</attribute>
		<attribute name="trigdir" get="1" set="1" type="int" size="1">
			<digest>
				Set the trigger direction
			</digest>
			<description>
				The direction to use to identify crosses in the trigger point: 0 is upwards, and 1 is downwards. (default=0)
			</description>
		</attribute>
		<attribute name="trigchan" get="1" set="1" type="int" size="1">
			<digest>
				Set the channel for trigger points
			</digest>
			<description>
				In mode 3, the channel to use for trigger points (default=0)
			</description>
		</attribute>
		<attribute name="trigthresh" get="1" set="1" type="float" size="1">
			<digest>
				Set the trigger signal level
			</digest>
			<description>
				The signal level at which to trigger a redraw in mode 3 (default=0.0)
			</description>
		</attribute>
	</attributelist>
		<!--MESSAGES-->

	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output/record latest MSP frame
			</digest>
			<description>
				Output the latest MSP frame during playback and recording. Essentially the same as sending a <m>bang</m> to <o>jit.catch~</o>.
			</description>
		</method>
		<method name="multichannelsignal">
			<arglist />
			<digest>
				Realtime audio to write to the matrix
			</digest>
			<description>
				Realtime multichannel-signal to capture within the <at>framesize</at> specified.
			</description>
		</method>
		<method name="export">
			<arglist>
				<arg name="filename" optional="1" type="symbol" />
			</arglist>
			<digest>
				Export as Jitter binary data file
			</digest>
			<description>
				If an <at>exportname</at> has previously been specified, the jxf-file will be written to the <m>dir</m> as specified by <o>the.jit.thalamus</o>.
				<br/> If an optional argument is provided (symbol), a jxf-file with this name will be written to disk.
				<br/> The resulting file is designed to populate a <o>jit.matrixset</o> which in return is being read from during offline rendering of complex matrix data.
				<br/> An additional <m>json</m>-file is also written, holding information about the blocks of recorded data.
			</description>
		</method>
		<method name="import">
			<arglist>
				<arg name="index" optional="1" type="symbol" />
			</arglist>
			<digest>
				Import Jitter binary data file
			</digest>
			<description>
				If an <at>exportname</at> has previously been specified, the jxf-file will be read from the <m>dir</m> as specified by <o>the.jit.thalamus</o>.
				<br/> If an optional argument is provided (symbol), it will be attempted to read a jxf-file with this name from disk.
			</description>
		</method>
				<method name="solo">
			<arglist />
			<digest>
				Toggle solo mode for operation
			</digest>
			<description>
				According to the numeric argument, will toggle the object's recording/rendering behaviour in relation to other objects in the context
				<br/>0 = use current <at>active</at> flag if no other object is running <m>@solo 1</m> or <m>@solo 2</m>, otherwise will set the object to <m>active 0</m> (bypass)
				<br/>1 = toggle <at>active</at> operation mode to <m>1</m> (operate) along with other objects <m>@solo 1</m>, but not if any object is running <m>@solo 2</m>, in which case it will be muted
				<br/>2 = unique operation, operate only this object. This will set all other objects' <at>active</at> flag to <m>5</m> (mute)
			</description>
		</method>
				<method name="unsolo">
			<arglist />
			<digest>
				Remove all solo states in sibling objects
			</digest>
			<description>
				The message <m>unsolo</m> does not remove the <m>solo</m> state of this object aloneâas would the message <m>solo 0</m>âbut does so for all other objects in the context as well.
			</description>
		</method>
		<method name="getstate">
	<arglist />
	<digest>
		Query information about this object's current state
	</digest>
	<description>
		The message <m>getstate</m> will post relevant status information about this object to the Max Console and open the latter for viewing. Sending this message to <o>the.jit.thalamus</o> will do so for all objects in the current context. Send this message to monitor whether objects will record or render and whether a meaningful name has been allocated to them.
	</description>
</method>
	</methodlist>

	<!--SEEALSO (REMOVE FOR SIMPLICITY) -->
	<seealsolist>
		<seealso name="the.jit.thalamus"/>
		<seealso name="the.chochlea~"/>
		<seealso name="the.cerebellum"/>
		<seealso name="the.mc.jit.amygdala~"/>
		<seealso name="the.mc.pac~"/>
		<seealso name="the.jit.pinealis"/>
		<seealso name="the.jit.tinnitus~"/>
		<seealso name="the.jit.mojo"/>
		<seealso name="the.circadian"/>
	</seealsolist>

</c74object>
