<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<c74object name="the.mc.data" module="max" category="Data, Timing">

	<digest>
		Capture timing-sensitive data for offline video rendering
	</digest>

	<description>
		Written by Tim Heinze © 2020, www.xenorama.com. <br/>
		<o>the.mc.data</o> captures any data which is subject to precise timing, or binds to objects of the jit.anim family for this purpose.
		<br/> At its core lies a single-track <o>mtr</o> which listens to incoming data of any size and type. In the course of offline rendering all previously recorded frames are normalised as timeline along which the data is being recalled, linearly, in blocks as long as one frame in samples.
	</description>

	<discussion>
		<o>the.jit.renderer~</o> providing a central context is required in the enviroment.
		<br/>
		<br/>
		Use <o>the.mc.data</o> as a hub between continuous, timed data and the video domain quantized to the desired framerate. To maximize efficiency, it is best practise to place this object as far up in the queue as possible (i.e., immedietely after any such timing objects which cannot operate offline, like <o>line</o>, <o>when</o>, <o>clocker</o>, <o>slide</o> etc.) and as close to the video domain as necessary to use as few as possible of the objects.<br/>
		Although it offers only one inlet, <o>the.mc.data</o> can store lists. If, for example, various gl-parameters of a <o>jit.gl.gridshape</o> or <o>jit.gl.mesh</o> are controlled by as many timed objects, all of these can be packed into  a list and routed through <o>the.mc.data</o> to be unzipped afterwards. This way, only one obejct is needed.
	</discussion>

	<!--METADATA (REMOVE FOR SIMPLICITY) -->
	<metadatalist>
		<metadata name="author">Tim Heinze</metadata>
		<metadata name="tag">Xenorama</metadata>
		<metadata name="tag">Offline Video Rendering</metadata>
		<metadata name="tag">Data, Timing</metadata>
	</metadatalist>

	<!--INLETS (REMOVE FOR SIMPLICITY) -->

	<!--OUTLETS (REMOVE FOR SIMPLICITY) -->

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="render-context" optional="0" type="symbol" size="1">
			<digest>
				Specify a named render context to bind to.
			</digest>
			<description>
				For convenience, this can be identical to one's world render context name but is to be considered independent. <o>the.jit.renderer~</o> with a unique context name is required running in parallel for all members of the offline render family to sync and respond to.
			</description>
		</objarg>
	</objarglist>

	<!--ATTRIBUTES (REMOVE FOR SIMPLICITY) -->
	<attributelist>
	<attribute name="name" get="1" set="1" type="symbol" size="1">
		<digest>
			Specify a unique name to write to
		</digest>
		<description>
			Specify a unique name to export to after completion of the capturing process, managed by <o>the.jit.renderer~</o>. The resulting filetype is <m>JSON</m> and can be re-exported/imported using the <m>export</m> and <m>import</m> messages, respectively.
		</description>
	</attribute>
	<attribute name="bindto" get="1" set="1" type="list" size="1">
		<digest>
			Bind to jit.anim.objects
		</digest>
		<description>
			Bind to jit.anim.objects. In single-channel mode, and when a jit.anim.object is directly connected to <o>the.mc.data</o>, the latter will automatically bind to it. A <m>bang</m> may be necessary when the object in question was instantiated after <o>the.mc.data</o>. In multi-channel mode, and using mc-routing objects, the objects in question must be given a unique name to all of which <o>the.mc.data</o> can bind using the <at>bindto</at> attribute. This will set the <at>active</at> to 4 and disable the jit.anim.objects during rendering — this way all their output can be captured during recording, ignored during playback and taken over during offline rendering.
		</description>
	</attribute>
		<attribute name="hot" get="1" set="1" type="int" size="1">
		<digest>
			Replicate latest data on every frame
		</digest>
		<description>
			Replicate latest recorded data on every frame, this flag is set to '0' (off) by default. When enabled, will always record (and thus output) the latest value on every frame, regardless of any silence in between. This is useful when <o>the.mc.data</o> receives few values in the timeline and only a partial section is being rendered. When disabled, any frames which do not contain data will not yield any data during rendering either. <br/>
			Note, that this settings needs to be activated before recording and is likely to not yield the same behaviour as the normal playback mode.
		</description>
	</attribute>
	<attribute name="active" get="1" set="1" type="int" size="1">
		<digest>
			Set the active flag
		</digest>
		<description>
			Set the active flag. There are 4 active states available suitable for different purposes:
			<br/>
			<br/>0 = ignore this object and pass everything through without recording or recalling
			<br/>1 = operate normally (default); playback, record and output during rendering
			<br/>2 = playback and output previously recorded data normally but do not record any new data
			<br/>3 = playback and record normally but do not output data during rendering
			<br/>4 = record and output during rendering but never pass incoming data (set automatically when bound to jit.anim.objects)
			<br/>5 = mute all activity
			<br/>
			<br/>Note that while recording is disabled, the automatic export upon recording completion (if a <at>name</at> is specified) is also disabled and previous files will not be overwritten.
			<br/>Furthermore, the <at>active</at> flag is overriden by the <m>solo</m> state of the object
		</description>
	</attribute>
</attributelist>

	<!--MESSAGES-->

	<methodlist>
		<method name="router">
			<arglist />
			<digest>
				Setup mc-output-compatibility
			</digest>
			<description>
				Connect an <o>mc.route</o> object to outlets. An optional number of voices specifies number of targets
			</description>
		</method>
		<method name="mctarget">
			<arglist />
			<digest>
				Setup mc-input-compatibility
			</digest>
			<description>
				Connect a <o>funnel</o> and setvalue-method to object. An optional number of voices specifies number of sources (channels)
			</description>
		</method>
		<method name="augment">
			<arglist />
			<digest>
				Setup mc-compatibility
			</digest>
			<description>
				Setup mc-compatibility. A combination of <m>mctarget</m> and <m>router</m> methods
			</description>
		</method>
		<method name="anim_merge">
			<arglist />
			<digest>
				Bindto to all jit.anim objects in the patch layer
			</digest>
			<description>
				Bindto to all jit.anim objects in the patch layer.<br/>
				Scans the patch layer and binds to all jit.anim objects it finds. This will <m>augment</m> all found objects regardless of whether they are already controlled by another instance of <o>the.mc.data</o>
			</description>
		</method>
		<method name="anything">
			<arglist>
				<arg name="input" optional="0" type="list" />
			</arglist>
			<digest>
				Store the message on the timeline
			</digest>
			<description>
				Legacy Note: The internal <o>mtr</o> object can store any type of data it receives—other than matrices or signals—including complex lists.
				Although <o>mtr</o> can record individual bytes of MIDI messages received from <o>midiin</o>, it stores each byte with a separate delta time, and does not format the MIDI messages the way <o>seq</o> does. If you want to record complete MIDI messages and edit them later, <o>seq</o> is better suited for the task. On the other hand, <o>mtr</o> is perfectly suited for recording sequences of numbers, lists, or symbols from virtually any object in Max: specialized MIDI objects such as <o>notein</o> or <o>pgmin</o>, user interface objects such as <link name="number" type="refpage">number box</link>, <o>slider</o>, and <o>dial</o>, or any other object.
			</description>
		</method>
		<method name="preview">
			<arglist>
				<arg name="position" optional="0" type="float" />
			</arglist>
			<digest>
				Normalised position (0. - 1.)
			</digest>
			<description>
				Output the corresponding frame at the normalised position while not rendering by <o>jit.world</o>.
			</description>
		</method>
		<method name="frame">
			<arglist>
				<arg name="position" optional="0" type="int" />
			</arglist>
			<digest>
				Jump to specific frame
			</digest>
			<description>
				Output the corresponding frame at the specified position while not rendering by <o>jit.world</o>.
				<br/>This method will only work if data has been recorded previously.
				<br/>This method has not yet been thoroughly tested and is subject to user feedback.
			</description>
		</method>
		<method name="export">
			<arglist>
				<arg name="filename" optional="1" type="symbol" />
			</arglist>
			<digest>
				Export as dictionary JSON file
			</digest>
			<description>
				If a <at>name</at> has previously been specified, the JSON-file will be written to the <m>dir</m> as specified by <o>the.jit.renderer~</o>.
				<br/> If an optional argument is provided (symbol), a JSON-file with this name will be written to disk instead.
			</description>
		</method>
		<method name="import">
			<arglist>
				<arg name="index" optional="1" type="symbol" />
			</arglist>
			<digest>
				Import dictionary JSON file
			</digest>
			<description>
				If an <at>name</at> has previously been specified, the JSON-file will be read from the <m>dir</m> as specified by <o>the.jit.renderer~</o>.
				<br/> If an optional argument is provided (symbol), it will be attempted to read a JSON-file with this name from disk.
			</description>
		</method>
<method name="queue">
	<arglist />
	<digest>
		Open the core Queue Manager GUI
	</digest>
	<description>
		The message <m>queue</m> will open the core Queue Manager GUI in <o>the.jit.renderer~</o> to specify which instance is recording or rendering in the next step.
	</description>
</method>
		<method name="unsolo">
	<arglist />
	<digest>
		Remove all solo states in sibling objects
	</digest>
	<description>
		The message <m>unsolo</m> does not remove the 'solo'-state of this object alone, but does so for all other objects in the context as well.
	</description>
</method>
		<method name="getstate">
	<arglist />
	<digest>
		Query information about this object's current state
	</digest>
	<description>
		The message <m>getstate</m> will post relevant status information about this object to the Max Console and open the latter for viewing. Sending this message to <o>the.jit.renderer~</o> will do so for all objects in the current context. Send this message to monitor whether objects will record or render and whether a meaningful name has been allocated to them.
	</description>
</method>
		<method name="trash">
			<arglist>
				<arg name="total-flag" optional="1" type="anything" />
			</arglist>
	<digest>
		Delete all files but the latest ones from disk which have been recorded or rendered
	</digest>
	<description>
	The message <m>trash</m> will delete all recorded or rendered files from disk which had previously been written in the current session, except the very last version. Essentially, it will pruge all unwanted data which may have been written accidentally or in the course of trial-and-error. <br/>If, however, the message <m>trash</m> is followed by any argument, all previous files will be deleted, including the latest one.<br/>This action cannot be undone and no confirmation will be demanded. The respective files are deleted permanently from disk.
	</description>
	</method>
	</methodlist>

	<!--EXAMPLE-->
	<examplelist>
		<example img="the.mc.data.png" caption="insert after timing-objects and before matrix/texture domain to record/render realtime data" />
	</examplelist>

	<!--SEEALSO (REMOVE FOR SIMPLICITY) -->
	<seealsolist>
		<seealso name="the.jit.renderer~"/>
		<seealso name="the.snapshot~"/>
		<seealso name="the.jit.poke~"/>
		<seealso name="the.mc.sfrecord~"/>
		<seealso name="the.jit.mo.drive"/>
		<seealso name="the.jit.framecheck"/>
		<seealso name="the.jit.framecheck~"/>
		<seealso name="the.timeline"/>
		<seealso name="the.mc.jit.catch~"/>
	</seealsolist>

</c74object>
