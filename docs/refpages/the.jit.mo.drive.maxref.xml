<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<c74object name="the.jit.mo.drive" module="jitter" category="Jitter System">

	<digest>
		Control a <o>jit.mo.func</o> object in non-realtime
	</digest>

	<description>
		Written by Tim Heinze Â© 2020, www.xenorama.com. <br/>
		Objects from the jit.mo-family operate in predictable and expected manner when a <o>jit.world</o> is currently enabled. <o>the.jit.mo.drive</o> can be attached to a <o>jit.mo.func</o> to progress through its phase during offline rendering. Any <at>speed</at> automation must be applied to the <o>jit.mo.drive</o> instead while the <o>jit.mo.func</o> will be automatically set to a <at>speed</at> of 0.
	</description>

	<discussion>
		<o>the.jit.renderer~</o> providing a central context is required in the enviroment.
		<br/>
		<br/>
		When attempting to render video frame-by-frame, the <o>jit.mo.func</o> objects will not output their matrices along the virtual, decellarated clock, but follow their own, internal timing. Given that <o>jit.world</o> is disabled during offline rendering, this behaviour is not compatible. To ensure precise timing of these objects, <o>the.jit.mo.drive</o> will control their <at>speed</at> parameter when connected to their leftmost inlet instead. This way, the speed of movement can be immitated exactly, and automated as well, via <o>the.circadian</o>, for example.
	</discussion>

	<!--METADATA (REMOVE FOR SIMPLICITY) -->
	<metadatalist>
		<metadata name="author">Tim Heinze</metadata>
		<metadata name="tag">Xenorama</metadata>
		<metadata name="tag">Offline Video Rendering</metadata>
		<metadata name="tag">Jitter System</metadata>
	</metadatalist>

	<!--INLETS (REMOVE FOR SIMPLICITY) -->

	<!--OUTLETS (REMOVE FOR SIMPLICITY) -->

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="render-context" optional="0" type="symbol" size="1">
			<digest>
				Specify a named render context to bind to.
			</digest>
			<description>
				For convenience, this can be identical to one's world render context name but is to be considered independent. <o>the.jit.renderer~</o> with a unique context name is required running in parallel for all members of the offline render family to sync and respond to.
			</description>
		</objarg>
	</objarglist>

	<!--ATTRIBUTES (REMOVE FOR SIMPLICITY) -->
	<attributelist>
		<attribute name="speed" get="1" set="1" type="int" size="1">
			<digest>
				Control the speed of an attached <o>jit.mo.func</o>.
			</digest>
			<description>
				Any <at>speed</at> automation must be applied to the <o>jit.mo.drive</o> instead while the <o>jit.mo.func</o> must be set to a <at>speed</at> of 0 at all times to avoid inevitable timing conflicts.
				<br/> The speed is set in Hz, analogous to the same <o>jit.mo.func</o> attribute.
			</description>
		</attribute>
		<attribute name="active" get="1" set="1" type="int" size="1">
			<digest>
				Set the active flag
			</digest>
			<description>
				Set the active flag. There are 4 active states available suitable for different purposes:
				<br/>
				<br/>0 = ignore this object and pass everything through without recording or recalling
				<br/>1 = operate normally (default); playback, record and output during rendering
				<br/>2 = playback and output previously recorded data normally but do not record any new data
				<br/>3 = playback and record normally but do not output data during rendering
				<br/>4 = record and output during rendering but never pass incoming data
				<br/>5 = mute all activity
				<br/>
				<br/>Note that while recording is disabled, the automatic export upon recording completion (if an <at>exportname</at> is specified) is also disabled and previous files will not be overwritten.
				<br/>Furthermore, the <at>active</at> flag is overriden by the <m>solo</m> state of the object
			</description>
		</attribute>
	</attributelist>

		<!--MESSAGES-->

	<methodlist>
		<method name="speed">
			<arglist>
				<arg name="Hz" optional="0" type="float" />
			</arglist>
			<digest>
				Control the speed of an attached <o>jit.mo.func</o>.
			</digest>
			<description>
				Any <at>speed</at> automation must be applied to the <o>jit.mo.drive.</o> instead while the <o>jit.mo.func</o> must be set to a <at>speed</at> of 0 at all times to avoid inevitable timing conflicts.
				<br/> The speed is set in Hz, analogous to the same <o>jit.mo.func</o> attribute.
			</description>
		</method>
<method name="queue">
	<arglist />
	<digest>
		Open the core Queue Manager GUI
	</digest>
	<description>
		The message <m>queue</m> will open the core Queue Manager GUI in <o>the.jit.renderer~</o> to specify which instance is recording or rendering in the next step.
	</description>
</method>
		<method name="unsolo">
	<arglist />
	<digest>
		Remove all solo states in sibling objects
	</digest>
	<description>
		The message <m>unsolo</m> does not remove the 'solo'-state of this object alone, but does so for all other objects in the context as well.
	</description>
</method>
<method name="getstate">
<arglist />
<digest>
Query information about this object's current state
</digest>
<description>
The message <m>getstate</m> will post relevant status information about this object to the Max Console and open the latter for viewing. Sending this message to <o>the.jit.renderer~</o> will do so for all objects in the current context. Send this message to monitor whether objects will record or render and whether a meaningful name has been allocated to them.
</description>
</method>
	</methodlist>

	<!--SEEALSO (REMOVE FOR SIMPLICITY) -->
	<seealsolist>
		<seealso name="the.jit.renderer~"/>
		<seealso name="jit.mo.func"/>
		<seealso name="jit.mo.join"/>
		<seealso name="the.snapshot~"/>
		<seealso name="the.mtr"/>
		<seealso name="the.jit.poke~"/>
		<seealso name="the.mc.sfrecord~"/>
		<seealso name="the.jit.framecheck"/>
		<seealso name="the.jit.framecheck~"/>
		<seealso name="the.timeline"/>
		<seealso name="the.mc.jit.catch~"/>
	</seealsolist>

</c74object>
